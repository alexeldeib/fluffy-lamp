apiVersion: v1
kind: ConfigMap
metadata:
  name: &name rabbit-config
  labels:
    app: rabbit
data:
  rabbitmq.conf: |
    # See https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example
    # Port
    listeners.tcp.default = 5672

    # Logging
    #log.file.level = info #default
    log.file.level = debug

    # Restrict guest to localhost.
    loopback_users.guest = true

    # Authentication
    auth_backends.1 = cache
    auth_cache.cached_backend = http
    auth_http.http_method = post
    auth_http.user_path = http://127.0.0.1:3030/auth/user
    auth_http.vhost_path = http://127.0.0.1:3030/auth/vhost
    auth_http.resource_path = http://127.0.0.1:3030/auth/resource
    auth_http.topic_path = http://127.0.0.1:3030/auth/topic

    # Cluster formation
    cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
    cluster_formation.k8s.service_name = rabbitmq-headless
    cluster_formation.k8s.address_type = hostname
    cluster_formation.k8s.hostname_suffix = .rabbitmq-headless.default.svc.cluster.local

    # Management options
    management.disable_stats = false
    management_agent.disable_metrics_collector = false
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rabbitmq
---
# RabbitMQ peer discovery needs to find its other endpoints
# Auth container needs access to config maps, local secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rabbitmq-endpoint-reader
rules:
  - apiGroups: [""]
    resources:
      - endpoints
    verbs:
      - get
      - list
  - apiGroups: [""]
    resources:
      - configmaps
      - secrets
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rabbitmq-endpoint-reader-binding
subjects:
  - kind: ServiceAccount
    name: rabbitmq
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: rabbitmq-endpoint-reader
---
# RabbitMQ itself needs access to nodes.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rabbitmq-cluster-reader
rules:
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
      - watch
      - list
---
# Bind our cluster role
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rabbitmq-cluster-reader-binding
subjects:
  - kind: ServiceAccount
    name: rabbitmq
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rabbitmq-cluster-reader
---
# Give access to token reviews
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rabbitmq-auth-delegator-binding
subjects:
  - kind: ServiceAccount
    name: rabbitmq
    namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
---
# Headless service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-headless
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  type: ClusterIP
  ports:
    - name: epmd
      port: 4369
      targetPort: epmd
    - name: amqp
      port: 5672
      targetPort: amqp
    - name: stats
      port: 15692
      targetPort: stats
    - name: mgmt
      port: 15672
      targetPort: mgmt
  selector:
    app: rabbitmq
    iter: "1"
---
# RabbitMQ runs as a stateful set. Note that we do not have any
# persistent volume claims
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  labels:
    app: &appname rabbitmq
    iter: &iter "1" # Leave this alone until we need a major upgrade
spec:
  serviceName: rabbitmq-headless
  podManagementPolicy: OrderedReady
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: *appname
      iter: *iter
  template:
    metadata:
      labels:
        app: *appname
        iter: *iter
    spec:
      serviceAccountName: rabbitmq
      terminationGracePeriodSeconds: 10
      containers:
        - name: rabbitmq
          image: "docker.io/alexeldeib/rabbit:latest"
          imagePullPolicy: IfNotPresent
          args: ["rabbitmq-server"]
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: RABBITMQ_NODENAME
              value: "rabbit@$(MY_POD_NAME).rabbitmq-headless.$(MY_POD_NAMESPACE).svc.cluster.local"
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
          volumeMounts:
            - name: &rabbitsecrets rabbitsecrets
              mountPath: "/etc/secrets"
            - name: &rabbitconfig rabbitconfig
              mountPath: "/etc/rabbitmq"
          ports:
            - name: epmd
              containerPort: 4369
            - name: amqp
              containerPort: 5672
            - name: stats
              containerPort: 15692
            - name: mgmt
              containerPort: 15672
          resources: {}
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - rabbitmq-diagnostics
                - -q
                - ping
            initialDelaySeconds: 600
            timeoutSeconds: 10
            periodSeconds: 30
            failureThreshold: 5
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - /usr/bin/env
                - rabbitmq-diagnostics
                - -q
                - check_port_connectivity
            timeoutSeconds: 10
            periodSeconds: 15
            failureThreshold: 3
            successThreshold: 1
      volumes:
        - name: *rabbitsecrets
          secret:
            secretName: rabbit-secret
        - name: *rabbitconfig
          configMap:
            name: rabbit-config
---

